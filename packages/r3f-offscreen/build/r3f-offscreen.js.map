{"version":3,"file":"r3f-offscreen.js","sources":["../src/events.ts","../src/Canvas.tsx","../src/render.ts"],"sourcesContent":["import { UseBoundStore } from \"zustand\";\nimport {\n   createEvents,\n   RootState,\n   EventManager,\n   Events,\n} from \"@react-three/fiber\";\nimport { Emitter } from \"mitt\";\n\nexport const EVENTS = {\n   onClick: [\"click\", false],\n   onContextMenu: [\"contextmenu\", false],\n   onDoubleClick: [\"dblclick\", false],\n   onWheel: [\"wheel\", true],\n   onPointerDown: [\"pointerdown\", true],\n   onPointerUp: [\"pointerup\", true],\n   onPointerLeave: [\"pointerleave\", true],\n   onPointerMove: [\"pointermove\", true],\n   onPointerCancel: [\"pointercancel\", true],\n   onLostPointerCapture: [\"lostpointercapture\", true],\n} as const;\n\nexport function createPointerEvents(emitter: Emitter<Record<any, unknown>>) {\n   return (\n      store: UseBoundStore<RootState | any>\n   ): EventManager<HTMLElement> => {\n      const { handlePointer } = createEvents(store);\n\n      return {\n         priority: 1,\n         enabled: true,\n         compute(event, state) {\n            // https://github.com/pmndrs/react-three-fiber/pull/782\n            // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n            state.pointer.set(\n               (event.offsetX / state.size.width) * 2 - 1,\n               -(event.offsetY / state.size.height) * 2 + 1\n            );\n            state.raycaster.setFromCamera(state.pointer, state.camera);\n         },\n\n         connected: undefined,\n         handlers: Object.keys(EVENTS).reduce(\n            (acc, key) => ({ ...acc, [key]: handlePointer(key) }),\n            {}\n         ) as unknown as Events,\n         connect: (target) => {\n            const { set, events } = store.getState();\n            events.disconnect?.();\n            set((state: any) => ({\n               events: { ...state.events, connected: target },\n            }));\n            Object.entries(events?.handlers ?? []).forEach(([name, event]) => {\n               const [eventName] = EVENTS[name as keyof typeof EVENTS];\n               emitter.on(eventName as any, event as any);\n            });\n         },\n         disconnect: () => {\n            const { set, events } = store.getState();\n            if (events.connected) {\n               Object.entries(events.handlers ?? []).forEach(\n                  ([name, event]) => {\n                     const [eventName] = EVENTS[name as keyof typeof EVENTS];\n                     emitter.off(eventName as any, event as any);\n                  }\n               );\n               set((state: any) => ({\n                  events: { ...state.events, connected: undefined },\n               }));\n            }\n         },\n      };\n   };\n}\n","import React, { useEffect, useRef } from \"react\";\nimport type { Options as ResizeOptions } from \"react-use-measure\";\nimport { Canvas as CanvasImpl, RenderProps } from \"@react-three/fiber\";\nimport { EVENTS } from \"./events\";\n\nexport interface CanvasProps\n   extends Omit<RenderProps<HTMLCanvasElement>, \"size\">,\n      React.HTMLAttributes<HTMLDivElement> {\n   worker: Worker;\n   fallback?: React.ReactNode;\n   /**\n    * Options to pass to useMeasure.\n    * @see https://github.com/pmndrs/react-use-measure#api\n    */\n   resize?: ResizeOptions;\n   /** The target where events are being subscribed to, default: the div that wraps canvas */\n   eventSource?: HTMLElement | React.MutableRefObject<HTMLElement>;\n   /** The event prefix that is cast into canvas pointer x/y events, default: \"offset\" */\n   eventPrefix?: \"offset\" | \"client\" | \"page\" | \"layer\" | \"screen\";\n}\n\nfunction isRefObject<T>(ref: any): ref is React.MutableRefObject<T> {\n   return ref && ref.current !== undefined;\n}\n\nexport function Canvas({\n   eventSource,\n   worker,\n   fallback,\n   style,\n   className,\n   id,\n   ...props\n}: CanvasProps) {\n   const [shouldFallback, setFallback] = React.useState(false);\n   const canvasRef = useRef<HTMLCanvasElement>(null!);\n   const hasTransferredToOffscreen = useRef(false);\n\n   useEffect(() => {\n      if (!worker) return;\n\n      const canvas = canvasRef.current;\n      try {\n         if (!hasTransferredToOffscreen.current) {\n            const offscreen = canvasRef.current.transferControlToOffscreen();\n            hasTransferredToOffscreen.current = true;\n            worker.postMessage(\n               {\n                  type: \"init\",\n                  payload: {\n                     props,\n                     drawingSurface: offscreen,\n                     width: canvas.clientWidth,\n                     height: canvas.clientHeight,\n                     top: canvas.offsetTop,\n                     left: canvas.offsetLeft,\n                     pixelRatio: window.devicePixelRatio,\n                  },\n               },\n               [offscreen]\n            );\n         }\n      } catch (e) {\n         // Browser doesn't support offscreen canvas at all\n         setFallback(true);\n         return;\n      }\n\n      worker.onmessage = (e) => {\n         if (e.data.type === \"error\") {\n            // Worker failed to initialize\n            setFallback(true);\n         }\n      };\n\n      const currentEventSource = isRefObject(eventSource)\n         ? eventSource.current\n         : eventSource || canvas;\n\n      Object.values(EVENTS).forEach(([eventName, passive]) => {\n         currentEventSource.addEventListener(\n            eventName,\n            (event: any) => {\n               // Prevent default for all passive events\n               if (!passive) event.preventDefault();\n               // Capture pointer automatically on pointer down\n               if (eventName === \"pointerdown\") {\n                  event.target.setPointerCapture(event.pointerId);\n               } else if (eventName === \"pointerup\") {\n                  event.target.releasePointerCapture(event.pointerId);\n               }\n\n               worker.postMessage({\n                  type: \"dom_events\",\n                  payload: {\n                     eventName,\n                     deltaX: event.deltaX,\n                     deltaY: event.deltaY,\n                     pointerId: event.pointerId,\n                     pointerType: event.pointerType,\n                     button: event.button,\n                     buttons: event.buttons,\n                     altKey: event.altKey,\n                     ctrlKey: event.ctrlKey,\n                     metaKey: event.metaKey,\n                     shiftKey: event.shiftKey,\n                     movementX: event.movementX,\n                     movementY: event.movementY,\n                     clientX: event.clientX,\n                     clientY: event.clientY,\n                     offsetX: event.offsetX,\n                     offsetY: event.offsetY,\n                     pageX: event.pageX,\n                     pageY: event.pageY,\n                     x: event.x,\n                     y: event.y,\n                  },\n               });\n            },\n            { passive }\n         );\n      });\n\n      const handleResize = () => {\n         worker.postMessage({\n            type: \"resize\",\n            payload: {\n               width: currentEventSource.clientWidth,\n               height: currentEventSource.clientHeight,\n               top: currentEventSource.offsetTop,\n               left: currentEventSource.offsetLeft,\n            },\n         });\n      };\n\n      window.addEventListener(\"resize\", handleResize);\n      return () => {\n         window.removeEventListener(\"resize\", handleResize);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [worker]);\n\n   useEffect(() => {\n      if (!worker) return;\n      worker.postMessage({ type: \"props\", payload: props });\n   }, [worker, props]);\n\n   return shouldFallback ? (\n      <CanvasImpl id={id} className={className} style={style} {...props}>\n         {fallback}\n      </CanvasImpl>\n   ) : (\n      <canvas\n         id={id}\n         className={className}\n         style={{\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            display: \"block\",\n            ...style,\n         }}\n         ref={canvasRef}\n      />\n   );\n}\n","import * as THREE from \"three\";\nimport mitt from \"mitt\";\nimport {\n   extend,\n   createRoot,\n   ReconcilerRoot,\n   Dpr,\n   Size,\n} from \"@react-three/fiber\";\nimport { DomEvent } from \"@react-three/fiber/dist/declarations/src/core/events\";\nimport { createPointerEvents } from \"./events\";\n\nexport function render(children: React.ReactNode) {\n   extend(THREE);\n\n   let root: ReconcilerRoot<HTMLCanvasElement>;\n   let dpr: Dpr = [1, 2];\n   let size: Size = {\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0,\n      updateStyle: false,\n   };\n   const emitter = mitt();\n\n   const handleInit = (payload: any) => {\n      const {\n         props,\n         drawingSurface: canvas,\n         width,\n         top,\n         left,\n         height,\n         pixelRatio,\n      } = payload;\n      try {\n         // Unmount root if already mounted\n         if (root) {\n            root.unmount();\n         }\n\n         // Shim the canvas into a fake window/document\n         Object.assign(canvas, {\n            pageXOffset: left,\n            pageYOffset: top,\n            clientLeft: left,\n            clientTop: top,\n            clientWidth: width,\n            clientHeight: height,\n            style: { touchAction: \"none\" },\n            ownerDocument: canvas,\n            documentElement: canvas,\n            getBoundingClientRect() {\n               return size;\n            },\n            setAttribute() {},\n            setPointerCapture() {},\n            releasePointerCapture() {},\n            addEventListener(event: string, callback: () => void) {\n               emitter.on(event, callback);\n            },\n            removeEventListener(event: string, callback: () => void) {\n               emitter.off(event, callback);\n            },\n         });\n         // Create react-three-fiber root\n         root = createRoot(canvas);\n         // Configure root\n         root.configure({\n            events: createPointerEvents(emitter),\n            size: (size = { width, height, top, left, updateStyle: false }),\n            dpr: (dpr = Math.min(Math.max(1, pixelRatio), 2)),\n            ...props,\n            onCreated: (state) => {\n               if (props.eventPrefix) {\n                  state.setEvents({\n                     compute: (event, state) => {\n                        const x = event[\n                           (props.eventPrefix + \"X\") as keyof DomEvent\n                        ] as number;\n                        const y = event[\n                           (props.eventPrefix + \"Y\") as keyof DomEvent\n                        ] as number;\n                        state.pointer.set(\n                           (x / state.size.width) * 2 - 1,\n                           -(y / state.size.height) * 2 + 1\n                        );\n                        state.raycaster.setFromCamera(\n                           state.pointer,\n                           state.camera\n                        );\n                     },\n                  });\n               }\n            },\n         });\n\n         // Render children once\n         root.render(children);\n      } catch (e: any) {\n         postMessage({ type: \"error\", payload: e?.message });\n      }\n\n      // Shim window to the canvas from here on\n      self.window = canvas;\n   };\n\n   const handleResize = ({ width, height, top, left }: Size) => {\n      if (!root) return;\n      root.configure({\n         size: (size = { width, height, top, left, updateStyle: false }),\n         dpr,\n      });\n   };\n\n   const handleEvents = (payload: any) => {\n      emitter.emit(payload.eventName, {\n         ...payload,\n         preventDefault() {},\n         stopPropagation() {},\n      });\n   };\n\n   const handleProps = (payload: any) => {\n      if (!root) return;\n      if (payload.dpr) dpr = payload.dpr;\n      root.configure({ size, dpr, ...payload });\n   };\n\n   const handlerMap = {\n      resize: handleResize,\n      init: handleInit,\n      dom_events: handleEvents,\n      props: handleProps,\n   };\n\n   self.onmessage = (event) => {\n      const { type, payload } = event.data;\n      const handler = handlerMap[type as keyof typeof handlerMap];\n      if (handler) handler(payload);\n   };\n\n   // Shims for threejs\n   // @ts-ignore\n   THREE.ImageLoader.prototype.load = function (\n      url: string,\n      onLoad: (img: ImageBitmap) => void,\n      onProgress: () => void,\n      onError: (e: Error) => void\n   ) {\n      if (this.path !== undefined) url = this.path + url;\n      url = this.manager.resolveURL(url);\n      const scope = this;\n      const cached = THREE.Cache.get(url);\n\n      if (cached !== undefined) {\n         scope.manager.itemStart(url);\n         if (onLoad) onLoad(cached);\n         scope.manager.itemEnd(url);\n         return cached;\n      }\n\n      fetch(url)\n         .then((res) => res.blob())\n         .then((res) =>\n            createImageBitmap(res, {\n               premultiplyAlpha: \"none\",\n               colorSpaceConversion: \"none\",\n            })\n         )\n         .then((bitmap) => {\n            THREE.Cache.add(url, bitmap);\n            if (onLoad) onLoad(bitmap);\n            scope.manager.itemEnd(url);\n         })\n         .catch(onError);\n      return {};\n   };\n\n   // Shims for web offscreen canvas\n   // @ts-ignore\n   self.window = {};\n   // @ts-ignore\n   self.document = {};\n   // @ts-ignore\n   self.Image = class {\n      height = 1;\n      width = 1;\n      set onload(callback: any) {\n         callback(true);\n      }\n   };\n}\n"],"names":["EVENTS","createPointerEvents","emitter","store","handlePointer","createEvents","event","state","acc","key","target","set","events","_a","name","eventName","isRefObject","ref","Canvas","eventSource","worker","fallback","style","className","id","props","shouldFallback","setFallback","React","canvasRef","useRef","hasTransferredToOffscreen","useEffect","canvas","offscreen","e","currentEventSource","passive","handleResize","CanvasImpl","jsx","render","children","extend","THREE","root","dpr","size","mitt","handlerMap","width","height","top","left","payload","pixelRatio","callback","createRoot","x","y","type","handler","url","onLoad","onProgress","onError","scope","cached","res","bitmap"],"mappings":"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"}